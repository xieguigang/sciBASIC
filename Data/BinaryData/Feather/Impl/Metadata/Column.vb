#Region "Microsoft.VisualBasic::69fc43bd7c9d048ae7cfb7384f4cc1c1, Data\BinaryData\Feather\Impl\Metadata\Column.vb"

    ' Author:
    ' 
    '       asuka (amethyst.asuka@gcmodeller.org)
    '       xie (genetics@smrucc.org)
    '       xieguigang (xie.guigang@live.com)
    ' 
    ' Copyright (c) 2018 GPL3 Licensed
    ' 
    ' 
    ' GNU GENERAL PUBLIC LICENSE (GPL3)
    ' 
    ' 
    ' This program is free software: you can redistribute it and/or modify
    ' it under the terms of the GNU General Public License as published by
    ' the Free Software Foundation, either version 3 of the License, or
    ' (at your option) any later version.
    ' 
    ' This program is distributed in the hope that it will be useful,
    ' but WITHOUT ANY WARRANTY; without even the implied warranty of
    ' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    ' GNU General Public License for more details.
    ' 
    ' You should have received a copy of the GNU General Public License
    ' along with this program. If not, see <http://www.gnu.org/licenses/>.



    ' /********************************************************************************/

    ' Summaries:


    ' Code Statistics:

    '   Total Lines: 102
    '    Code Lines: 91
    ' Comment Lines: 2
    '   Blank Lines: 9
    '     File Size: 4.66 KB


    '     Class Column
    ' 
    '         Properties: ByteBuffer, MetadataType, Name, UserMetadata, Values
    ' 
    '         Function: __assign, CreateColumn, EndColumn, GetNameBytes, (+2 Overloads) GetRootAsColumn
    '                   GetUserMetadataBytes, Metadata
    ' 
    '         Sub: __init, AddMetadata, AddMetadataType, AddName, AddUserMetadata
    '              AddValues, StartColumn
    ' 
    ' 
    ' /********************************************************************************/

#End Region

' automatically generated by the FlatBuffers compiler, do not modify


Imports Microsoft.VisualBasic.DataStorage.FeatherFormat.FlatBuffers

Namespace Impl.FbsMetadata

    Friend Class Column
        Implements IFlatbufferObject
        Private __p As Table = New Table()
        Public ReadOnly Property ByteBuffer As ByteBuffer Implements IFlatbufferObject.ByteBuffer
            Get
                Return __p.bb
            End Get
        End Property
        Public Shared Function GetRootAsColumn(_bb As ByteBuffer) As Column
            Return GetRootAsColumn(_bb, New Column())
        End Function
        Public Shared Function GetRootAsColumn(_bb As ByteBuffer, obj As Column) As Column
            Return obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)
        End Function
        Public Sub __init(_i As Integer, _bb As ByteBuffer) Implements IFlatbufferObject.__init
            __p.bb_pos = _i
            __p.bb = _bb
        End Sub
        Public Function __assign(_i As Integer, _bb As ByteBuffer) As Column
            __init(_i, _bb)
            Return Me
        End Function

        Public ReadOnly Property Name As String
            Get
                Dim o = __p.__offset(4)
                Return If(o <> 0, __p.__string(o + __p.bb_pos), Nothing)
            End Get
        End Property
        Public Function GetNameBytes() As ArraySegment(Of Byte)?
            Return __p.__vector_as_arraysegment(4)
        End Function
        Public ReadOnly Property Values As PrimitiveArray
            Get
                Dim o = __p.__offset(6)
                Return If(o <> 0, CType((New PrimitiveArray()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb), PrimitiveArray), Nothing)
            End Get
        End Property
        Public ReadOnly Property MetadataType As TypeMetadata
            Get
                Dim o = __p.__offset(8)
                Return If(o <> 0, CType(__p.bb.Get(o + __p.bb_pos), TypeMetadata), TypeMetadata.NONE)
            End Get
        End Property
        Public Function Metadata(Of TTable As {IFlatbufferObject, New})() As TTable
            Dim o = __p.__offset(10)
            Return If(o <> 0, __p.__union(Of TTable)(o), Nothing)
        End Function
        ''' This should (probably) be JSON
        Public ReadOnly Property UserMetadata As String
            Get
                Dim o = __p.__offset(12)
                Return If(o <> 0, __p.__string(o + __p.bb_pos), Nothing)
            End Get
        End Property
        Public Function GetUserMetadataBytes() As ArraySegment(Of Byte)?
            Return __p.__vector_as_arraysegment(12)
        End Function

        Public Shared Function CreateColumn(builder As FlatBufferBuilder, Optional nameOffset As StringOffset = Nothing, Optional valuesOffset As Offset(Of PrimitiveArray) = Nothing, Optional metadata_type As TypeMetadata = TypeMetadata.NONE, Optional metadataOffset As Integer = 0, Optional user_metadataOffset As StringOffset = Nothing) As Offset(Of Column)
            builder.StartObject(5)
            AddUserMetadata(builder, user_metadataOffset)
            AddMetadata(builder, metadataOffset)
            AddValues(builder, valuesOffset)
            AddName(builder, nameOffset)
            AddMetadataType(builder, metadata_type)
            Return EndColumn(builder)
        End Function

        Public Shared Sub StartColumn(builder As FlatBufferBuilder)
            builder.StartObject(5)
        End Sub
        Public Shared Sub AddName(builder As FlatBufferBuilder, nameOffset As StringOffset)
            builder.AddOffset(0, nameOffset.Value, 0)
        End Sub
        Public Shared Sub AddValues(builder As FlatBufferBuilder, valuesOffset As Offset(Of PrimitiveArray))
            builder.AddOffset(1, valuesOffset.Value, 0)
        End Sub
        Public Shared Sub AddMetadataType(builder As FlatBufferBuilder, metadataType As TypeMetadata)
            builder.AddByte(2, metadataType, 0)
        End Sub
        Public Shared Sub AddMetadata(builder As FlatBufferBuilder, metadataOffset As Integer)
            builder.AddOffset(3, metadataOffset, 0)
        End Sub
        Public Shared Sub AddUserMetadata(builder As FlatBufferBuilder, userMetadataOffset As StringOffset)
            builder.AddOffset(4, userMetadataOffset.Value, 0)
        End Sub
        Public Shared Function EndColumn(builder As FlatBufferBuilder) As Offset(Of Column)
            Dim o As Integer = builder.EndObject()
            Return New Offset(Of Column)(o)
        End Function
    End Class


End Namespace


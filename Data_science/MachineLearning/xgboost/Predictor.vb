#Region "Microsoft.VisualBasic::0a1ce374d1ea9b01451624effe3b58ce, G:/GCModeller/src/runtime/sciBASIC#/Data_science/MachineLearning/xgboost//Predictor.vb"

    ' Author:
    ' 
    '       asuka (amethyst.asuka@gcmodeller.org)
    '       xie (genetics@smrucc.org)
    '       xieguigang (xie.guigang@live.com)
    ' 
    ' Copyright (c) 2018 GPL3 Licensed
    ' 
    ' 
    ' GNU GENERAL PUBLIC LICENSE (GPL3)
    ' 
    ' 
    ' This program is free software: you can redistribute it and/or modify
    ' it under the terms of the GNU General Public License as published by
    ' the Free Software Foundation, either version 3 of the License, or
    ' (at your option) any later version.
    ' 
    ' This program is distributed in the hope that it will be useful,
    ' but WITHOUT ANY WARRANTY; without even the implied warranty of
    ' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    ' GNU General Public License for more details.
    ' 
    ' You should have received a copy of the GNU General Public License
    ' along with this program. If not, see <http://www.gnu.org/licenses/>.



    ' /********************************************************************************/

    ' Summaries:


    ' Code Statistics:

    '   Total Lines: 255
    '    Code Lines: 139
    ' Comment Lines: 81
    '   Blank Lines: 35
    '     File Size: 9.95 KB


    ' Class Predictor
    ' 
    '     Properties: numClass, sparkModelParam
    ' 
    '     Constructor: (+2 Overloads) Sub New
    ' 
    '     Function: (+3 Overloads) predict, (+2 Overloads) predictLeaf, predictRaw, (+3 Overloads) predictSingle, predictSingleRaw
    ' 
    '     Sub: initObjFunction, initObjGbm, readParam
    '     Class ModelParam
    ' 
    '         Constructor: (+1 Overloads) Sub New
    ' 
    ' 
    ' 
    ' /********************************************************************************/

#End Region

Imports System.IO
Imports Microsoft.VisualBasic.MachineLearning.XGBoost.config
Imports Microsoft.VisualBasic.MachineLearning.XGBoost.gbm
Imports Microsoft.VisualBasic.MachineLearning.XGBoost.learner
Imports Microsoft.VisualBasic.MachineLearning.XGBoost.spark
Imports Microsoft.VisualBasic.MachineLearning.XGBoost.util

''' <summary>
''' Predicts using the Xgboost model.
''' </summary>
<Serializable>
Public Class Predictor

    Private mparam As ModelParam
    Private sparkModelParam_Renamed As SparkModelParam
    Private name_obj As String
    Private name_gbm As String
    Private obj As ObjFunction
    Private gbm As GradBooster

    Public Sub New([in] As Stream)
        Me.New([in], Nothing)
    End Sub

    ''' <summary>
    ''' Instantiates with the Xgboost model
    ''' </summary>
    ''' <param name="in"> input stream </param>
    ''' <param name="configuration"> configuration </param>
    ''' <exception cref="IOException"> If an I/O error occurs </exception>
    Public Sub New([in] As Stream, configuration As PredictorConfiguration)
        If configuration Is Nothing Then
            configuration = PredictorConfiguration.DEFAULT
        End If

        Dim reader As New ModelReader([in])
        readParam(reader)
        initObjFunction(configuration)
        initObjGbm()
        gbm.loadModel(reader, mparam.saved_with_pbuffer <> 0)
    End Sub

    Friend Overridable Sub readParam(reader As ModelReader)
        Dim first4Bytes = reader.readByteArray(4)
        Dim next4Bytes = reader.readByteArray(4)
        Dim base_score As Single
        Dim num_feature As Integer

        If first4Bytes(0) = &H62 AndAlso first4Bytes(1) = &H69 AndAlso first4Bytes(2) = &H6E AndAlso first4Bytes(3) = &H66 Then

            ' Old model file format has a signature "binf" (62 69 6e 66)
            base_score = reader.asFloat(next4Bytes)
            num_feature = reader.readUnsignedInt()
        ElseIf first4Bytes(0) = &H0 AndAlso first4Bytes(1) = &H5 AndAlso first4Bytes(2) = &H5F Then

            ' Model generated by xgboost4j-spark?
            Dim modelType As String = Nothing

            If first4Bytes(3) = &H63 AndAlso next4Bytes(0) = &H6C AndAlso next4Bytes(1) = &H73 AndAlso next4Bytes(2) = &H5F Then
                ' classification model
                modelType = SparkModelParam.MODEL_TYPE_CLS
            ElseIf first4Bytes(3) = &H72 AndAlso next4Bytes(0) = &H65 AndAlso next4Bytes(1) = &H67 AndAlso next4Bytes(2) = &H5F Then
                ' regression model
                modelType = SparkModelParam.MODEL_TYPE_REG
            End If

            If Not ReferenceEquals(modelType, Nothing) Then
                Dim len As Integer = (next4Bytes(3) << 8) + (reader.readByteAsInt())
                Dim featuresCol = reader.readUTF(len)
                sparkModelParam_Renamed = New SparkModelParam(modelType, featuresCol, reader)
                base_score = reader.readFloat()
                num_feature = reader.readUnsignedInt()
            Else
                base_score = reader.asFloat(first4Bytes)
                num_feature = reader.asUnsignedInt(next4Bytes)
            End If
        Else
            base_score = reader.asFloat(first4Bytes)
            num_feature = reader.asUnsignedInt(next4Bytes)
        End If

        mparam = New ModelParam(base_score, num_feature, reader)
        name_obj = reader.readString()
        name_gbm = reader.readString()
    End Sub

    Friend Overridable Sub initObjFunction(configuration As PredictorConfiguration)
        obj = configuration.objFunction

        If obj Is Nothing Then
            obj = ObjFunction.fromName(name_obj)
        End If
    End Sub

    Friend Overridable Sub initObjGbm()
        obj = ObjFunction.fromName(name_obj)
        gbm = GradBooster_Factory.createGradBooster(name_gbm)
        gbm.numClass = mparam.num_class
    End Sub

    ''' <summary>
    ''' Generates predictions for given feature vector.
    ''' </summary>
    ''' <param name="feat"> feature vector </param>
    ''' <returns> prediction values </returns>
    Public Overridable Function predict(feat As FVec) As Double()
        Return predict(feat, False)
    End Function

    ''' <summary>
    ''' Generates predictions for given feature vector.
    ''' </summary>
    ''' <param name="feat">          feature vector </param>
    ''' <param name="output_margin"> whether to only predict margin value instead of transformed prediction </param>
    ''' <returns> prediction values </returns>
    Public Overridable Function predict(feat As FVec, output_margin As Boolean) As Double()
        Return predict(feat, output_margin, 0)
    End Function

    ''' <summary>
    ''' Generates predictions for given feature vector.
    ''' </summary>
    ''' <param name="feat">          feature vector </param>
    ''' <param name="output_margin"> whether to only predict margin value instead of transformed prediction </param>
    ''' <param name="ntree_limit">   limit the number of trees used in prediction </param>
    ''' <returns> prediction values </returns>
    Public Overridable Function predict(feat As FVec, output_margin As Boolean, ntree_limit As Integer) As Double()
        Dim preds = predictRaw(feat, ntree_limit)

        If Not output_margin Then
            Return obj.predTransform(preds)
        End If

        Return preds
    End Function

    Friend Overridable Function predictRaw(feat As FVec, ntree_limit As Integer) As Double()
        Dim preds = gbm.predict(feat, ntree_limit)

        For i = 0 To preds.Length - 1
            preds(i) += mparam.base_score
        Next

        Return preds
    End Function

    ''' <summary>
    ''' Generates a prediction for given feature vector.
    ''' <para>
    ''' This method only works when the model outputs single value.
    ''' </para>
    ''' </summary>
    ''' <param name="feat"> feature vector </param>
    ''' <returns> prediction value </returns>
    Public Overridable Function predictSingle(feat As FVec) As Double
        Return predictSingle(feat, False)
    End Function

    ''' <summary>
    ''' Generates a prediction for given feature vector.
    ''' <para>
    ''' This method only works when the model outputs single value.
    ''' </para>
    ''' </summary>
    ''' <param name="feat">          feature vector </param>
    ''' <param name="output_margin"> whether to only predict margin value instead of transformed prediction </param>
    ''' <returns> prediction value </returns>
    Public Overridable Function predictSingle(feat As FVec, output_margin As Boolean) As Double
        Return predictSingle(feat, output_margin, 0)
    End Function

    ''' <summary>
    ''' Generates a prediction for given feature vector.
    ''' <para>
    ''' This method only works when the model outputs single value.
    ''' </para>
    ''' </summary>
    ''' <param name="feat">          feature vector </param>
    ''' <param name="output_margin"> whether to only predict margin value instead of transformed prediction </param>
    ''' <param name="ntree_limit">   limit the number of trees used in prediction </param>
    ''' <returns> prediction value </returns>
    Public Overridable Function predictSingle(feat As FVec, output_margin As Boolean, ntree_limit As Integer) As Double
        Dim pred = predictSingleRaw(feat, ntree_limit)

        If Not output_margin Then
            Return obj.predTransform(pred)
        End If

        Return pred
    End Function

    Friend Overridable Function predictSingleRaw(feat As FVec, ntree_limit As Integer) As Double
        Return gbm.predictSingle(feat, ntree_limit) + mparam.base_score
    End Function

    ''' <summary>
    ''' Predicts leaf index of each tree.
    ''' </summary>
    ''' <param name="feat"> feature vector </param>
    ''' <returns> leaf indexes </returns>
    Public Overridable Function predictLeaf(feat As FVec) As Integer()
        Return predictLeaf(feat, 0)
    End Function

    ''' <summary>
    ''' Predicts leaf index of each tree.
    ''' </summary>
    ''' <param name="feat">        feature vector </param>
    ''' <param name="ntree_limit"> limit </param>
    ''' <returns> leaf indexes </returns>
    Public Overridable Function predictLeaf(feat As FVec, ntree_limit As Integer) As Integer()
        Return gbm.predictLeaf(feat, ntree_limit)
    End Function

    Public Overridable ReadOnly Property sparkModelParam As SparkModelParam
        Get
            Return sparkModelParam_Renamed
        End Get
    End Property

    ''' <summary>
    ''' Returns number of class.
    ''' </summary>
    ''' <returns> number of class </returns>
    Public Overridable ReadOnly Property numClass As Integer
        Get
            Return mparam.num_class
        End Get
    End Property

    ''' <summary>
    ''' Parameters.
    ''' </summary>
    <Serializable>
    Friend Class ModelParam
        ' \brief global bias 
        Friend ReadOnly base_score As Single
        ' \brief number of features  
        Friend ReadOnly num_feature As Integer
        ' \brief number of class, if it is multi-class classification  
        Friend ReadOnly num_class As Integer
        ' ! \brief whether the model itself is saved with pbuffer 
        Friend ReadOnly saved_with_pbuffer As Integer
        ' ! \brief reserved field 
        Friend ReadOnly reserved As Integer()

        Friend Sub New(base_score As Single, num_feature As Integer, reader As ModelReader)
            Me.base_score = base_score
            Me.num_feature = num_feature
            num_class = reader.readInt()
            saved_with_pbuffer = reader.readInt()
            reserved = reader.readIntArray(30)
        End Sub
    End Class
End Class

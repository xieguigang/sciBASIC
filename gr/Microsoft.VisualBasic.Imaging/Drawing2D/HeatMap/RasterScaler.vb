#Region "Microsoft.VisualBasic::34d490cab0a77f5537bba13c8fe29c70, gr\Microsoft.VisualBasic.Imaging\Drawing2D\HeatMap\RasterScaler.vb"

    ' Author:
    ' 
    '       asuka (amethyst.asuka@gcmodeller.org)
    '       xie (genetics@smrucc.org)
    '       xieguigang (xie.guigang@live.com)
    ' 
    ' Copyright (c) 2018 GPL3 Licensed
    ' 
    ' 
    ' GNU GENERAL PUBLIC LICENSE (GPL3)
    ' 
    ' 
    ' This program is free software: you can redistribute it and/or modify
    ' it under the terms of the GNU General Public License as published by
    ' the Free Software Foundation, either version 3 of the License, or
    ' (at your option) any later version.
    ' 
    ' This program is distributed in the hope that it will be useful,
    ' but WITHOUT ANY WARRANTY; without even the implied warranty of
    ' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    ' GNU General Public License for more details.
    ' 
    ' You should have received a copy of the GNU General Public License
    ' along with this program. If not, see <http://www.gnu.org/licenses/>.



    ' /********************************************************************************/

    ' Summaries:


    ' Code Statistics:

    '   Total Lines: 238
    '    Code Lines: 153 (64.29%)
    ' Comment Lines: 50 (21.01%)
    '    - Xml Docs: 66.00%
    ' 
    '   Blank Lines: 35 (14.71%)
    '     File Size: 8.93 KB


    '     Class RasterScaler
    ' 
    '         Properties: size
    ' 
    '         Constructor: (+2 Overloads) Sub New
    ' 
    '         Function: GetPixel, GetRasterData, GetRasterPixels, (+2 Overloads) Scale, ToRasterVector
    ' 
    '         Sub: (+2 Overloads) Dispose, Scale, ScaleTo
    ' 
    ' 
    ' /********************************************************************************/

#End Region

Imports System.Drawing
Imports System.Drawing.Imaging
Imports System.Runtime.CompilerServices
Imports Microsoft.VisualBasic.Drawing.Imaging.BitmapImage
Imports Microsoft.VisualBasic.Imaging.BitmapImage
Imports Microsoft.VisualBasic.Imaging.Drawing2D.HeatMap.hqx
Imports Microsoft.VisualBasic.Imaging.Driver
Imports Microsoft.VisualBasic.Math.LinearAlgebra

Namespace Drawing2D.HeatMap

    ''' <summary>
    ''' do image size scaling
    ''' </summary>
    ''' <remarks>
    ''' A internal image data readonly matrix object
    ''' </remarks>
    Public Class RasterScaler : Implements IDisposable, IRasterGrayscaleHeatmap

        Dim disposedValue As Boolean
        Dim buffer As BitmapBuffer
        Dim formula As Func(Of Color, Single)

        ''' <summary>
        ''' the dimension size of the bitmap buffer data
        ''' </summary>
        ''' <returns></returns>
        Public ReadOnly Property size As Size
            Get
                Return buffer.Size
            End Get
        End Property

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="heatmap">
        ''' a heatmap imaging result which is generated by the <see cref="PixelRender"/>
        ''' </param>
        Sub New(heatmap As Bitmap, Optional formula As Func(Of Color, Single) = Nothing)
            Me.buffer = BitmapBuffer.FromBitmap(heatmap)
            Me.formula = formula

            If formula Is Nothing Then
                Me.formula = Function(c) c.GetBrightness
            End If
        End Sub

        Shared Sub New()
            Call RgbYuv.hqxInit()
        End Sub

        ''' <summary>
        ''' scale image size via rectangle drawing
        ''' </summary>
        ''' <param name="g"></param>
        ''' <param name="region"></param>
        ''' 
        <MethodImpl(MethodImplOptions.AggressiveInlining)>
        Public Sub ScaleTo(g As IGraphics, region As Rectangle)
            Call Scale(g, region.Size, region.Location)
        End Sub

        <MethodImpl(MethodImplOptions.AggressiveInlining)>
        Public Function GetPixel(x As Integer, y As Integer) As Color
            Return buffer.GetPixel(x, y)
        End Function

        <MethodImpl(MethodImplOptions.AggressiveInlining)>
        Private Function GetRasterPixels() As IEnumerable(Of Pixel) Implements IRasterGrayscaleHeatmap.GetRasterPixels
            Return GetRasterData.Select(Function(p) DirectCast(p, Pixel))
        End Function

        ''' <summary>
        ''' Get grayscale raster data
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks>
        ''' default scale value of each <see cref="PixelData"/> is the color brightness
        ''' </remarks>
        Public Iterator Function GetRasterData(Optional byrow As Boolean = True) As IEnumerable(Of PixelData)
            Dim w = buffer.Width
            Dim h = buffer.Height
            Dim c As Color
            Dim l As Double

            If byrow Then
                For y As Integer = 0 To buffer.Height - 1
                    For x As Integer = 0 To buffer.Width - 1
                        c = buffer.GetPixel(x, y)
                        l = formula(c)

                        Yield New PixelData With {
                            .Scale = l,
                            .X = x + 1,
                            .Y = y + 1
                        }
                    Next
                Next
            Else
                ' bycol
                For x As Integer = 0 To buffer.Width - 1
                    For y As Integer = 0 To buffer.Height - 1
                        c = buffer.GetPixel(x, y)
                        l = formula(c)

                        Yield New PixelData With {
                            .Scale = l,
                            .X = x + 1,
                            .Y = y + 1
                        }
                    Next
                Next
            End If
        End Function

        Public Shared Function ToRasterVector(img As Image, Optional resize As Integer() = Nothing) As Vector
            If Not resize.IsNullOrEmpty Then
#If NET48 Then
                img = img.ResizeScaled(resize)
#Else
                img = New Bitmap(img).Resize(resize(0), resize(1))
#End If
            End If

            Return New RasterScaler(img) _
                .GetRasterData(byrow:=True) _
                .Select(Function(i) i.Scale) _
                .AsVector
        End Function

        Public Function Scale(newWidth As Integer, newHeight As Integer) As Bitmap
            Dim canvas As IGraphics = Driver.CreateGraphicsDevice(New Size(newWidth, newHeight), fill:=NameOf(Color.Transparent), driver:=Drivers.GDI)

            Call Scale(canvas, New Size(newWidth, newHeight))
            Call canvas.Flush()

            Return New Bitmap(DirectCast(canvas, GdiRasterGraphics).ImageResource)
        End Function

        ''' <summary>
        ''' scale image size via rectangle drawing
        ''' </summary>
        ''' <param name="g"></param>
        ''' <param name="newSize"></param>
        ''' <param name="offset"></param>
        Public Sub Scale(g As IGraphics, newSize As Size, Optional offset As Point = Nothing)
            Dim width As Single = newSize.Width / buffer.Width
            Dim height As Single = newSize.Height / buffer.Height
            Dim cellSize As New SizeF(width * 1.0125, height * 1.0125)
            Dim pixel As RectangleF
            Dim color As SolidBrush
            Dim c As Color

            If cellSize.Width < 1 Then
                cellSize = New SizeF(1, cellSize.Height)
            End If
            If cellSize.Height < 1 Then
                cellSize = New SizeF(cellSize.Width, 1)
            End If

            For x As Integer = 0 To buffer.Width - 1
                For y As Integer = 0 To buffer.Height - 1
                    c = buffer.GetPixel(x, y)

                    If Not c.IsTransparent Then
                        color = New SolidBrush(c)
                        pixel = New RectangleF(New PointF(x * width + offset.X, y * height + offset.Y), cellSize)

                        g.FillRectangle(color, pixel)
                    End If
                Next
            Next
        End Sub

        Public Function Scale(hqx As HqxScales) As Bitmap
            If hqx = HqxScales.None Then
                ' no scale
                ' returns the raw image directly
                Return buffer.GetImage
            End If

            ' create new bitmap for write scaled data
#If NET48 Then
            Dim scales As New Bitmap(buffer.Width * hqx, buffer.Height * hqx, format:=PixelFormat.Format32bppArgb)
#Else
            Dim scales As New Bitmap(buffer.Width * hqx, buffer.Height * hqx)
#End If

            Dim p As BitmapBuffer = BitmapBuffer.FromBitmap(scales)
            ' get source data
            Dim sp As UInteger() = buffer.GetARGBStream
            Dim dp As UInteger() = p.GetARGBStream

            Select Case hqx
                Case HqxScales.Hqx_2x : Call Hqx_2x.hq2x_32_rb(sp, dp, buffer.Width, buffer.Height)
                Case HqxScales.Hqx_3x : Call Hqx_3x.hq3x_32_rb(sp, dp, buffer.Width, buffer.Height)
                Case HqxScales.Hqx_4x : Call Hqx_4x.hq4x_32_rb(sp, dp, buffer.Width, buffer.Height)
                Case Else
                    Throw New InvalidProgramException($"invalid scale name: {hqx.ToString}!")
            End Select

            Call p.WriteARGBStream(dp)
            Call p.Dispose()

            Erase sp
            Erase dp

            Return scales
        End Function

        Protected Overridable Sub Dispose(disposing As Boolean)
            If Not disposedValue Then
                If disposing Then
                    ' TODO: dispose managed state (managed objects)
                    Call buffer.Dispose()
                End If

                ' TODO: free unmanaged resources (unmanaged objects) and override finalizer
                ' TODO: set large fields to null
                disposedValue = True
            End If
        End Sub

        ' ' TODO: override finalizer only if 'Dispose(disposing As Boolean)' has code to free unmanaged resources
        ' Protected Overrides Sub Finalize()
        '     ' Do not change this code. Put cleanup code in 'Dispose(disposing As Boolean)' method
        '     Dispose(disposing:=False)
        '     MyBase.Finalize()
        ' End Sub

        Public Sub Dispose() Implements IDisposable.Dispose
            ' Do not change this code. Put cleanup code in 'Dispose(disposing As Boolean)' method
            Dispose(disposing:=True)
            GC.SuppressFinalize(Me)
        End Sub
    End Class
End Namespace
